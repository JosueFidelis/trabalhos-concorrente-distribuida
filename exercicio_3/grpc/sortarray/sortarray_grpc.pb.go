// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: sortarray/sortarray.proto

package go_sortarray_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SortArrayClient is the client API for SortArray service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SortArrayClient interface {
	Sort(ctx context.Context, in *Arr, opts ...grpc.CallOption) (*Arr, error)
}

type sortArrayClient struct {
	cc grpc.ClientConnInterface
}

func NewSortArrayClient(cc grpc.ClientConnInterface) SortArrayClient {
	return &sortArrayClient{cc}
}

func (c *sortArrayClient) Sort(ctx context.Context, in *Arr, opts ...grpc.CallOption) (*Arr, error) {
	out := new(Arr)
	err := c.cc.Invoke(ctx, "/sortarray.SortArray/Sort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SortArrayServer is the server API for SortArray service.
// All implementations must embed UnimplementedSortArrayServer
// for forward compatibility
type SortArrayServer interface {
	Sort(context.Context, *Arr) (*Arr, error)
	mustEmbedUnimplementedSortArrayServer()
}

// UnimplementedSortArrayServer must be embedded to have forward compatible implementations.
type UnimplementedSortArrayServer struct {
}

func (UnimplementedSortArrayServer) Sort(context.Context, *Arr) (*Arr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sort not implemented")
}
func (UnimplementedSortArrayServer) mustEmbedUnimplementedSortArrayServer() {}

// UnsafeSortArrayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SortArrayServer will
// result in compilation errors.
type UnsafeSortArrayServer interface {
	mustEmbedUnimplementedSortArrayServer()
}

func RegisterSortArrayServer(s grpc.ServiceRegistrar, srv SortArrayServer) {
	s.RegisterService(&SortArray_ServiceDesc, srv)
}

func _SortArray_Sort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Arr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SortArrayServer).Sort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sortarray.SortArray/Sort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SortArrayServer).Sort(ctx, req.(*Arr))
	}
	return interceptor(ctx, in, info, handler)
}

// SortArray_ServiceDesc is the grpc.ServiceDesc for SortArray service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SortArray_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sortarray.SortArray",
	HandlerType: (*SortArrayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sort",
			Handler:    _SortArray_Sort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sortarray/sortarray.proto",
}
